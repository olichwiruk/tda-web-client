<%
const { utils, route, config, modelTypes } = it;
const { _, classNameCase, require } = utils;
const apiClassName = classNameCase(route.moduleName);
const routes = route.routes;
const dataContracts = _.map(modelTypes, "name");
%>

<% if (config.httpClientType === config.constants.HTTP_CLIENT.AXIOS) { %> import { AxiosRequestConfig, AxiosResponse } from "axios"; <% } %>

import { validate } from "./<%~ config.fileNames.dataContracts %>.validator"
import { <%~ dataContracts.join(", ") %> } from "./<%~ config.fileNames.dataContracts %>"
import { HttpClient, RequestParams, ContentType } from "./<%~ config.fileNames.httpClient %>";
<% if (dataContracts.length) { %>
import { <%~ dataContracts.join(", ") %> } from "./<%~ config.fileNames.dataContracts %>"
<% } %>

import { injectable, inject } from 'inversify'
import { Identifiers as SI_API } from '@/modules/common/api'

@injectable()
export class <%= apiClassName %><SecurityDataType = unknown><% if (!config.singleHttpClient) { %> extends HttpClient<SecurityDataType> <% } %> {

<% if(config.singleHttpClient) { %>
  constructor (
    @inject(SI_API.COMMON.API.HTTP_CLIENT) private http: HttpClient<SecurityDataType>
  ) {}
<% } %>

    <% routes.forEach((route) => { %>
        <%~ includeFile('./procedure-call.eta', { ...it, route }) %>
    <% }) %>
}
